Grading at 10/26/2022:06:46:44.016502
For commit ID c68f1a6e5dd36f52a25fae17ad824191c2c53a07
Grading at Wed Oct 26 02:46:36 AM EDT 2022
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.2: Current test is story-step1 storye1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.3: Current test is story-step1 storye2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.4: Current test is story-step1 storye3.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.5: Current test is story-step1 storye4.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.6: Current test is story-step1 storye5.txt  
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

2.2: Current test is story-step2 worde1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind reported errors
Valgrind reported errors or memory leaks:
==2326521== Memcheck, a memory error detector
==2326521== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2326521== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2326521== Command: ./story-step3 words.txt story2.txt
==2326521== Parent PID: 2326520
==2326521== 
==2326521== 
==2326521== HEAP SUMMARY:
==2326521==     in use at exit: 24 bytes in 1 blocks
==2326521==   total heap usage: 83 allocs, 82 frees, 14,912 bytes allocated
==2326521== 
==2326521== 24 bytes in 1 blocks are definitely lost in loss record 1 of 1
==2326521==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2326521==    by 0x109497: main (story-step3.c:18)
==2326521== 
==2326521== LEAK SUMMARY:
==2326521==    definitely lost: 24 bytes in 1 blocks
==2326521==    indirectly lost: 0 bytes in 0 blocks
==2326521==      possibly lost: 0 bytes in 0 blocks
==2326521==    still reachable: 0 bytes in 0 blocks
==2326521==         suppressed: 0 bytes in 0 blocks
==2326521== 
==2326521== For lists of detected and suppressed errors, rerun with: -s
==2326521== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

3.2: Current test is story-step3 words.txt storye6.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind reported errors:
==2326543== Memcheck, a memory error detector
==2326543== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2326543== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2326543== Command: ./story-step3 words.txt storye6.txt
==2326543== Parent PID: 2326542
==2326543== 
==2326543== Invalid read of size 8
==2326543==    at 0x109CC9: readCatName (rand_story.c:115)
==2326543==    by 0x109DD3: readStoryLine (rand_story.c:133)
==2326543==    by 0x109577: main (story-step3.c:40)
==2326543==  Address 0x4a90f70 is 16 bytes before a block of size 8 alloc'd
==2326543==    at 0x48487A9: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2326543==    by 0x1096C7: setUsedWords (rand_story.c:13)
==2326543==    by 0x109C39: readCatName (rand_story.c:99)
==2326543==    by 0x109DD3: readStoryLine (rand_story.c:133)
==2326543==    by 0x109577: main (story-step3.c:40)
==2326543== 
==2326543== Invalid read of size 1
==2326543==    at 0x484ED76: __strlen_sse2 (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2326543==    by 0x490B602: strdup (strdup.c:41)
==2326543==    by 0x1096F3: setUsedWords (rand_story.c:14)
==2326543==    by 0x109CE5: readCatName (rand_story.c:116)
==2326543==    by 0x109DD3: readStoryLine (rand_story.c:133)
==2326543==    by 0x109577: main (story-step3.c:40)
==2326543==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2326543== 
==2326543== 
==2326543== Process terminating with default action of signal 11 (SIGSEGV)
==2326543==  Access not within mapped region at address 0x0
==2326543==    at 0x484ED76: __strlen_sse2 (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2326543==    by 0x490B602: strdup (strdup.c:41)
==2326543==    by 0x1096F3: setUsedWords (rand_story.c:14)
==2326543==    by 0x109CE5: readCatName (rand_story.c:116)
==2326543==    by 0x109DD3: readStoryLine (rand_story.c:133)
==2326543==    by 0x109577: main (story-step3.c:40)
==2326543==  If you believe this happened as a result of a stack
==2326543==  overflow in your program's main thread (unlikely but
==2326543==  possible), you can try to increase the size of the
==2326543==  main thread stack using the --main-stacksize= flag.
==2326543==  The main thread stack size used in this run was 8388608.
==2326543== 
==2326543== HEAP SUMMARY:
==2326543==     in use at exit: 9,554 bytes in 27 blocks
==2326543==   total heap usage: 41 allocs, 14 frees, 9,851 bytes allocated
==2326543== 
==2326543== For a detailed leak analysis, rerun with: --leak-check=full
==2326543== 
==2326543== For lists of detected and suppressed errors, rerun with: -s
==2326543== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind reported errors
Valgrind reported errors or memory leaks:
==2326579== Memcheck, a memory error detector
==2326579== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2326579== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==2326579== Command: ./story-step4 words.txt story2.txt
==2326579== Parent PID: 2326578
==2326579== 
==2326579== 
==2326579== HEAP SUMMARY:
==2326579==     in use at exit: 24 bytes in 1 blocks
==2326579==   total heap usage: 83 allocs, 82 frees, 14,912 bytes allocated
==2326579== 
==2326579== 24 bytes in 1 blocks are definitely lost in loss record 1 of 1
==2326579==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==2326579==    by 0x1094F5: main (story-step4.c:29)
==2326579== 
==2326579== LEAK SUMMARY:
==2326579==    definitely lost: 24 bytes in 1 blocks
==2326579==    indirectly lost: 0 bytes in 0 blocks
==2326579==      possibly lost: 0 bytes in 0 blocks
==2326579==    still reachable: 0 bytes in 0 blocks
==2326579==         suppressed: 0 bytes in 0 blocks
==2326579== 
==2326579== For lists of detected and suppressed errors, rerun with: -s
==2326579== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
