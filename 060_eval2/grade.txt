Grading at 10/26/2022:18:28:58.382391
For commit ID df04fc866fc8b75ad1bd358d605a98b8daaa909f
Grading at Wed Oct 26 02:28:47 PM EDT 2022
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.2: Current test is story-step1 storye1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.3: Current test is story-step1 storye2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.4: Current test is story-step1 storye3.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.5: Current test is story-step1 storye4.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.6: Current test is story-step1 storye5.txt  
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

2.2: Current test is story-step2 worde1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind reported errors
Valgrind reported errors or memory leaks:
==3242882== Memcheck, a memory error detector
==3242882== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3242882== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3242882== Command: ./story-step3 words.txt story2.txt
==3242882== Parent PID: 3242881
==3242882== 
==3242882== 
==3242882== HEAP SUMMARY:
==3242882==     in use at exit: 24 bytes in 1 blocks
==3242882==   total heap usage: 90 allocs, 89 frees, 14,961 bytes allocated
==3242882== 
==3242882== 24 bytes in 1 blocks are definitely lost in loss record 1 of 1
==3242882==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==3242882==    by 0x109497: main (story-step3.c:18)
==3242882== 
==3242882== LEAK SUMMARY:
==3242882==    definitely lost: 24 bytes in 1 blocks
==3242882==    indirectly lost: 0 bytes in 0 blocks
==3242882==      possibly lost: 0 bytes in 0 blocks
==3242882==    still reachable: 0 bytes in 0 blocks
==3242882==         suppressed: 0 bytes in 0 blocks
==3242882== 
==3242882== For lists of detected and suppressed errors, rerun with: -s
==3242882== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

3.2: Current test is story-step3 words.txt storye6.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind reported errors
Valgrind reported errors or memory leaks:
==3243138== Memcheck, a memory error detector
==3243138== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3243138== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3243138== Command: ./story-step4 words.txt story2.txt
==3243138== Parent PID: 3243136
==3243138== 
==3243138== 
==3243138== HEAP SUMMARY:
==3243138==     in use at exit: 24 bytes in 1 blocks
==3243138==   total heap usage: 90 allocs, 89 frees, 14,961 bytes allocated
==3243138== 
==3243138== 24 bytes in 1 blocks are definitely lost in loss record 1 of 1
==3243138==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==3243138==    by 0x1094F5: main (story-step4.c:29)
==3243138== 
==3243138== LEAK SUMMARY:
==3243138==    definitely lost: 24 bytes in 1 blocks
==3243138==    indirectly lost: 0 bytes in 0 blocks
==3243138==      possibly lost: 0 bytes in 0 blocks
==3243138==    still reachable: 0 bytes in 0 blocks
==3243138==         suppressed: 0 bytes in 0 blocks
==3243138== 
==3243138== For lists of detected and suppressed errors, rerun with: -s
==3243138== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
