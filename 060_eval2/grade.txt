Grading at 10/26/2022:18:22:58.659317
For commit ID 6e7ff1a988cad98aa9978d4e9f25ad2455a2eed0
Grading at Wed Oct 26 02:22:50 PM EDT 2022
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Line_1_did_not_match
Line_2_did_not_match
Your file did not match the expected ouput
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
You considered this a failure case:
timeout: the monitored command dumped core
But we did not.

1.2: Current test is story-step1 storye1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.3: Current test is story-step1 storye2.txt
-----------------------------
You considered this a failure case:
timeout: the monitored command dumped core
But we did not.

1.4: Current test is story-step1 storye3.txt
-----------------------------
You considered this a failure case:
timeout: the monitored command dumped core
But we did not.

1.5: Current test is story-step1 storye4.txt
-----------------------------
You considered this a failure case:
timeout: the monitored command dumped core
But we did not.

1.6: Current test is story-step1 storye5.txt  
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind reported errors:
==3215607== Memcheck, a memory error detector
==3215607== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3215607== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3215607== Command: ./story-step1 storye5.txt
==3215607== Parent PID: 3215606
==3215607== 
==3215607== Invalid free() / delete / delete[] / realloc()
==3215607==    at 0x484B27F: free (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==3215607==    by 0x109EAA: readStoryLine (rand_story.c:145)
==3215607==    by 0x1094A0: main (story-step1.c:21)
==3215607==  Address 0x10b0e5 is in a r-- mapped file /home/ece551db/graderbase/work/sm957.060_eval2.VEXMYm/story-step1 segment
==3215607== 
==3215607== 
==3215607== HEAP SUMMARY:
==3215607==     in use at exit: 610 bytes in 4 blocks
==3215607==   total heap usage: 8 allocs, 5 frees, 4,728 bytes allocated
==3215607== 
==3215607== For a detailed leak analysis, rerun with: --leak-check=full
==3215607== 
==3215607== For lists of detected and suppressed errors, rerun with: -s
==3215607== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

2.2: Current test is story-step2 worde1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind reported errors
Valgrind reported errors or memory leaks:
==3215803== Memcheck, a memory error detector
==3215803== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3215803== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3215803== Command: ./story-step3 words.txt story2.txt
==3215803== Parent PID: 3215802
==3215803== 
==3215803== 
==3215803== HEAP SUMMARY:
==3215803==     in use at exit: 24 bytes in 1 blocks
==3215803==   total heap usage: 90 allocs, 89 frees, 14,961 bytes allocated
==3215803== 
==3215803== 24 bytes in 1 blocks are definitely lost in loss record 1 of 1
==3215803==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==3215803==    by 0x109497: main (story-step3.c:18)
==3215803== 
==3215803== LEAK SUMMARY:
==3215803==    definitely lost: 24 bytes in 1 blocks
==3215803==    indirectly lost: 0 bytes in 0 blocks
==3215803==      possibly lost: 0 bytes in 0 blocks
==3215803==    still reachable: 0 bytes in 0 blocks
==3215803==         suppressed: 0 bytes in 0 blocks
==3215803== 
==3215803== For lists of detected and suppressed errors, rerun with: -s
==3215803== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

3.2: Current test is story-step3 words.txt storye6.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind reported errors
Valgrind reported errors or memory leaks:
==3215942== Memcheck, a memory error detector
==3215942== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3215942== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3215942== Command: ./story-step4 words.txt story2.txt
==3215942== Parent PID: 3215941
==3215942== 
==3215942== 
==3215942== HEAP SUMMARY:
==3215942==     in use at exit: 24 bytes in 1 blocks
==3215942==   total heap usage: 90 allocs, 89 frees, 14,961 bytes allocated
==3215942== 
==3215942== 24 bytes in 1 blocks are definitely lost in loss record 1 of 1
==3215942==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==3215942==    by 0x1094F5: main (story-step4.c:29)
==3215942== 
==3215942== LEAK SUMMARY:
==3215942==    definitely lost: 24 bytes in 1 blocks
==3215942==    indirectly lost: 0 bytes in 0 blocks
==3215942==      possibly lost: 0 bytes in 0 blocks
==3215942==    still reachable: 0 bytes in 0 blocks
==3215942==         suppressed: 0 bytes in 0 blocks
==3215942== 
==3215942== For lists of detected and suppressed errors, rerun with: -s
==3215942== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
